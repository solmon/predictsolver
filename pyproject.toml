[build-system]
requires = ["setuptools>=42.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"

[tool.poe.tasks]
# Environment setup tasks
setup = { shell = "uv venv && source .venv/bin/activate" }
install = { cmd = "uv pip install -r requirements.txt" }
install-dev = { shell = "cd core && uv pip install -e ." }
install-dataapi = { shell = "cd apps/dataapi && pnpm install" }

# Run apps
run-sample = { cmd = "python apps/sample_app.py" }
run-sample-api = { cmd = "python apps/sample_app.py --mode api" }
run-dataapi = { shell = "cd apps/dataapi && pnpm run start" }
run-dataapi-dev = { shell = "cd apps/dataapi && pnpm run start:dev" }

# Development tasks
lint = { cmd = "flake8 core apps tests" }
format = { cmd = "black core apps tests" }
test = { cmd = "pytest" }
test-core = { cmd = "pytest tests/core" }
test-dataapi = { shell = "cd apps/dataapi && pnpm run test" }
test-dataapi-e2e = { shell = "cd apps/dataapi && pnpm run test:e2e" }

# Build tasks
build-dataapi = { shell = "cd apps/dataapi && pnpm run build" }

# Integration tasks
integration-test = { cmd = "python tools/integration_test.py" }

# Combined tasks
setup-all = { sequence = ["setup", "install", "install-dev", "install-dataapi"] }
check = { sequence = ["lint", "test"] }
check-all = { sequence = ["lint", "test", "test-dataapi"] }
